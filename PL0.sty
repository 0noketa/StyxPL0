

Language PL0
;; contains any conflict


Regular Grammar

ign Ign = ' \n\r\t'
let Alf = 'A'..'Z' | 'a'..'z'
let Num = '0'..'9'
let Alnm = Alf | Num
tok Id = Alf {Alnm}
tok Int = ('1'..'9') {Num} | "0"
tok Str = '\22' {('\20' .. '\21' | '\\' '\22')} '\22'
tok Op = "," | ";" | "." | ":" | ":=" | "=" | '#+-*/()[]'
com Cm = "{" {('\20'..'\7C') | '\7E' | '\r\n\t'} "}"

Context Free Grammar

start Prog
:prog: "PROGRAM" Id Defs "."

;; replace Stm in Defs/Defs2 if you want to force to use begin-end
let Proc
:Proc: "BEGIN" Stms "END"

let Defs
:none:
:proc: ";" Stm
:def : ";" Def
:defs: ";" Def Defs

let Def
:vars: "VAR" Ids
:proc: "PROCEDURE" Id Prms Defs

let Prms
:none:
:prms: "(" OptIds ")"

let OptIds
:none:
:ign0: Ids

let Ids
:id  : Id
:ids : Id "," Ids

let Stms
:none:
:stm : Stm
:stms: Stm ";" Stms

let Stm
:begn: "BEGIN" Stms "END"
:if  : "IF" Expr "THEN" Stm Else
:asgn: Qid ":=" Expr
:stor: Qid "[" Expr "]" ":=" Expr
:rtrn: "RETURN" Expr
;; :prnt: "PRINT" "(" Exprs ")"
:call: "CALL" Qid OptArgs

let Else
:none:
:else: "ELSE" Stm
:elif: "ELSIF" Expr "THEN" Stm Else

let OptArgs
:none:
:ign0: Args

let Args
:args: "(" Exprs ")"

let Exprs
:none:
:xpr : Expr
:xprs: Expr "," Exprs

let Expr
:ign0: Expr2
:equ : Expr2 "=" Expr2
:neq : Expr2 "#" Expr2

let Expr2
:ign0: Expr3
:add : Expr2 "+" Expr3
:sub : Expr2 "-" Expr3

let Expr3
:ign0: Expr4
:mul : Expr3 "*" Expr4
:div : Expr3 "/" Expr4
:mod : Expr3 "MOD" Expr4

let Expr4
:qid : Qid
:int : Int
:str : Str
:list: "[" Exprs "]"
:load: Qid "[" Expr "]"
:call: Qid Args

let Qid
:id  : Id
:qid : Id "." Qid
